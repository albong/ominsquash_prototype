      _____              _                             _                 
     / ___ \            (_)                           | |                
    | |   | |____  ____  _  ___  ____ _   _  ____  ___| | _              
    | |   | |    \|  _ \| |/___)/ _  | | | |/ _  |/___) || \             
    | |___| | | | | | | | |___ | | | | |_| ( ( | |___ | | | |            
     \_____/|_|_|_|_| |_|_(___/ \_|| |\____|\_||_(___/|_| |_|            
                                   |_|                                   
 _____                                                     _             
(____ \                                     _         _   (_)            
 _   \ \ ___   ____ _   _ ____   ____ ____ | |_  ____| |_  _  ___  ____  
| |   | / _ \ / ___) | | |    \ / _  )  _ \|  _)/ _  |  _)| |/ _ \|  _ \ 
| |__/ / |_| ( (___| |_| | | | ( (/ /| | | | |_( ( | | |__| | |_| | | | |
|_____/ \___/ \____)\____|_|_|_|\____)_| |_|\___)_||_|\___)_|\___/|_| |_|

+---------------------+
|  Table of Contents  |
+---------------------+

1. Introduction

2. Engine vs. Game
    The distinction between general source code, and game specific source code.
    Some information about directory structure.

3. Data Files
    Some words about formatting and directory structure, and how files are
    loaded.
    
4. Frame Stack
    How the layers of logic/drawing work.
    
5. Input
    How to check and receive input.
    
6. Graphics
    A bit about how SDL is abstracted.
    
7. Sprites/Animations/Hitboxes
    The connection and explanation between these three classes.

8. Animating Sprites
    An explanation of the format for image files and the data files needed for
    animated sprites.
    
9. Area graphics
    How the graphics for an area are different.
    
10. Creators
    Adding game specific logic (eg enemies, weapons, etc).
    
11. Entities
    The primary class for game objects.
    
12. Initialization/Termination
    Initializing and freeing data/resources.
    
13. Miscellaneous
    Temporary entities, etc.

    
+-------------------+
|  1. Introduction  |
+-------------------+

The engine is intended to imitate, but expand on, the
mechanics of the original Zelda and the Gameboy Zelda's, by infusing elements of
exploratory games such as the Megaman Legends series, Fallout, and the Metroid
Prime series.  It is in no way a direct clone of any of these, and the planned
games have their own novel stories and characters.

Omnisquash is a game engine written in C, with compilation and development tools
written in Python 2.  Planned development tools will be written with HTML and 
Javascript, using a Python server to host.  The engine is pseudo object 
oriented - structs contain function pointers, and are "subclassed" by other 
structs which contain a struct of the "superclass" as their first member.  The
engine also somewhat imitates the virtual tables of C++, which is explained more
in depth in the section on Creators.  

In the vein of Python, functions for objects take a pointer to the object as 
their first parameter (usually named "self").  In general, functions which might
be different from instance to instance are stored as pointers in the structs,
while methods which should not vary are just declared in the appropriate header
(though still with the convention of the first argument being "self").  This
primarily comes into play with subclasses.

Why C?  Cause I know C, and I'm not overly familiar with C++.  Easier to get
started with something you know right?

There is a file named "design_principles.txt" which lays out some of guiding
rules and ideas that I have in mind as I develop.  There is no style document,
since I'm the only one doing development currently, and I can be trusted to more
or less adhere to my personal style (this is blatantly untrue even as this is
first written).

It is my intention to release the engine (but not the planned games) as open
source, and the idea that someone else may someday use this is continually in
the back of my mind as I plan and write.

The planned games are codenamed Shirt and Pants, if I refer to them throughout.

There is a dev blog at omnisquash.wordpress.com, which may be useful in
clarifying and expounding on the things described in this document.

Also, I'm sloppy in refering to functions and methods as the same thing.

Also, idk if the ordering of this document is reasonable.


+----------------------+
|  2. Game vs. Engine  |
+----------------------+

A game engine is a thing around which a game is build, like the engine in a car.
The car doesn't go without the engine, and the engine is not itself a vehicle.

However, since Omnisquash is written in C, any "game stuff" has to be compiled
with the engine.  There are ways around this, linking libraries or using
scripting, but at least for the moment (and I intend permanently), this is how
things are.  Thus, there is a division between code for specific games, and code
for the engine.

The engine code, excepting the parts that hook into the game code, lives in src.
If you wanted to make your own game with Omnisquash, you probably wouldn't need
to change very much of this code, if any.  You probably wouldn't even need to
understand most of it.

The code for a specific game lives in various directories outside of src, like
entitites, enemies, weapons, and etc.  Each of these directories contains files
*_tables.c/h, which are how the engine hooks into this code (described in the
section on Creators).  The actual source files in these directories have names
of a particular form, starting with the ID for the code contained.  The public
methods for each header file also have specific names, and there are a limited
number of public methods that can be implemented.  In the C file you can have
any kind of static methods you want, but the files and headers need to follow
certain conventions.  The ID numbers should be aligned to data files as well.

Again, the details of how this magic works are described in other sections, but
be aware that though you need to compile the engine and your game files
together, there is a separation between the code.


+-----------------+
|  3. Data Files  |
+-----------------+

Data files are JSON files.  Maybe someday I'll compress/encrypt them (lol) but
for now they're just straight JSON.  I'm using cJSON to do the parsing (props to
that sweet library), almost all of which occurs in data_reader.c.

Most of the formats are flexible right now, and accordingly there is little
validation of input.  When things stabilize further, I will add validation, but 
it seems like a time consuming and code obfuscating step when I'm liable to 
change the format drastically immediately afterwards.

Data files are stored in the directory data, where there are general config
files and then subdirectories for each different kind of object.  Files for
objects are named using five digit ID numbers, and as described in the sections
on Creators and Sprites/Animations/Hitboxes, there are some rules and
consistency required in the naming of these files.

I won't go into the details of each file type here, JSON is a reasonably clear
format so just go look at the files yourself.  However, more information about
the data in animation files can be found in the section Animating Sprites.


+------------------+
|  4. Frame Stack  |
+------------------+

The frame stack (I'm not sure what it should properly be called, I've heard it
called "window stack", but all of the files and variables are called "frames" so
that's what I'm going with) is a critical component of the engine.  In main.c
there is a typical game loop: take input, do logic, draw, repeat.  The frame
stack separates the logic and drawing of various components of the game.

It is probably best explained by example.

When you start the game, the only frame on the stack is the title screen frame:

    --> TitleScreenFrame

When you start a new game, the loading screen frame receives information about
what to load, and is then pushed onto the stack:

    --> LoadingScreenFrame
        TitleScreenFrame
        
Now, the logic for the title screen is not executed, but optionally the title
screen may be drawn underneath the loading screen (it isn't at the moment).
When the loading screen finishes, then it pushes the game frame onto the stack:

    --> GameFrame
        LoadingScreenFrame
        TitleScreenFrame
        
Now the logic for the game is running, but not the logic for the loading screen
and title screen, though they may be drawn underneath of it (again, currently 
aren't).  Now you decide to change your weapons, and so pull up the menu; the 
game frame pushes the menu frame onto the stack:

    --> MenuFrame
        GameFrame
        LoadingScreenFrame
        TitleScreenFrame

Now the logic for the menu is running, but not the logic for the frames below, 
but they are possibly getting drawn underneath (partially why no computation is
done in any draw methods).  After you finish changing your weapons, you exit the
menu, which pops itself off the stack and returns you to the game:

    --> GameFrame
        LoadingScreenFrame
        TitleScreenFrame
        
And if you exit the game, both the game frame and loading screen get popped off.

Each frame is a struct with function pointers to a method for logic (which 
returns -1, 0, or 1 depending on if it should pop, do nothing, or push), a
method for drawing, and a flag for whether or not the frame should be drawn if
it isn't the top frame.  To set which frame should be pushed on, you set the
global variable _current_frame (which is poorly named, since it really isn't
tracking the current frame, but the frame to be pushed).

If you pop off the bottom most frame, then the loop exits, and everything gets
torn down, and the game exits.

I don't necessarily love the way I've implemented this system, but it seems to
work, so yolo.


+------------+
|  5. Input  |
+------------+

OUTDATED - use the methods checkInput and checkAndConsumeInput

To check input, include input.h.  There are two instances of the same struct
available in this file, _input and _inputRead.  The struct itself contains a
flag for each possible button.  

If you want to check that a button is being pressed, check _input and 
_inputRead.  If the flag in _input is 1, that means that the key is being 
pressed.  If the flag in _inputRead is 1, that means that something else has
already processed the input, and you probably don't want to act on the input (an
exception to this would be movement, in which you want the button to be pressed
continuously).  After reading the input, decide if you need continuous input or
if you want other things to also check this input, then set the flag in 
inputRead accordingly.

If you're pushing or popping frames, or entering menus or etc, it is probably a
good idea to call consumeAllInput, which sets all
members of _inputRead to 1 if the corresponding key is being pressed.

The current keybindings are:

    Start   - C
    Select  - X
    A       - S
    B       - D
    X       - W
    Y       - E
    Up      - UP
    Down    - DOWN
    Left    - LEFT
    Right   - RIGHT
    Exit    - ESC

Obviously in the future we'll make keys customizable.


+---------------+
|  6. Graphics  |
+---------------+

Currently, Omnisquash uses SDL2 for its graphics library.  However, SDL is only
used in graphics.h/c and input.h/c.  Transitioning to a different graphics
library (or dare I say, different platform) is thus relatively straightforward,
as evidenced by the relative ease of transition from SDL1 to SDL2 that was made
some time back.

The primary abstraction over SDL is the Image struct (for graphics, I have 
eschewed object oriented code, as imperative code seems more reasonable), which
holds an SDL_Surface or an SDL_Texture, a height and width, and a flag to
determine whether the surface or texture is being used.  Though to be honest, I
cannot recall anywhere that an SDL_Surface is actually used, I think its a hold
over from when I used SDL1.  We certainly shouldn't be using surfaces, since
those are processed by the CPU, while textures are graphics accelerated (the
main advantage of SDL2 over SDL1).

The other graphics object is a sprite, which holds an image and frame sizes, see
the section on Animating Sprites for further details.

Most of the graphics methods are straightforward and do exactly what their name
suggests.

For loaded images, magic pink is transparent.


+----------------------------------+
|  7. Sprites/Animations/Hitboxes  |
+----------------------------------+

Sprite, Animation, and Hitboxes are three classes that are deeply connected,
because their usage is deeply connected.  Accordingly, the data files are
connected also.

In essence, the timings of animation frames and hitboxes should be aligned, so
internally both the Sprite and Hitboxes classes rely on the Animation class to
determine their timings.  Because of this, the data files for each class are
expected to have matching ID numbers - if you load an entity that has animation
01234, the files 01234.sprite, 01234.hitboxes, and 01234.animation will be
loaded.  You should not try to match 01234.sprite with 43210.animation.

Its reasonable to have many things in a game with identical animation timings -
reskinned enemies for example.  In this case, you are still supposed to create
duplicate animation/hitboxes files with the ID matching the ID of the sprites.
This is just how it works.

However, its not required that all three files exist.  Entity is the base class
for objects on the screen, but there's no reason that all of those things need
be animated or to have hitboxes.  For example, the loading screen features an
image that says "Loading...".  This is an entity, which has a sprite, but the 
sprite has no need for hitboxes or an animation, so those files don't exist.  In
the case when no animation file is found, the file "no_animation.animation" is
used, whereas the hitboxes are simply left empty.

Currently there are messages printed to the console about missing files, but
this is likely to change since missing files may not be an error.

For more about the formatting of these files, and how animations actually work,
see the sections on Data Files and Animating Sprites.


+------------------------+
|  8. Animating Sprites  |
+------------------------+

This section is specifically about how animation works.  For the interplay
between the related objects, see the section on Sprites/Animations/Hitboxes.  
For general comments about how graphics are handled, see the section on 
Graphics.  For information about the general format of data files, see the 
section on Data Files.

The Sprite object in Omnisquash is really more of a spritesheet - it contains an
Image object, and the pieces of information necessary to logically divide the
image into sections, with each section being a frame of animation.  Which is, in
fact, exactly how the drawing methods work.  Frames are all the same size, and
are numbered starting with 0 at the top left, then moving right, then moving
down.

A 2D animation can be thought of as a series of frames, with a timing for each
frame.  We refer to these as loops, with the Animation object being a collection
of the data for multiple loops.  Each loop contains an ordered list of frame
numbers, and millisecond timings for each frame.

For example, suppose that you had a simple animated sprite with only three
frames; the data for the loop could be:

    frames: [1, 0, 2]
    timings: [200, 100, 1000]

which would be interpreted as "display frame 1 for 200 milliseconds, then
display frame 0 for 100 milliseconds, then display frame 2 for 1000 
milliseconds".  

You can play frames in any order - indeed, you should put all of the frames for
a single object into one sheet, and have as many loops as required.

How does the animation progress?  During the logic loop, you must call the
updateAnimation method in graphics.h.  If you want to change what loop is being
played, use setAnimationLoop after updating the animation (the forceRestart is 
to simplify logic).  I typically just update an Entity's animation as the first
thing in the logic loop.

Of course, loops don't need to actually "loop"; its totally fine to play a loop
only once.


+--------------------+
|  9. Area graphics  |
+--------------------+

Areas, aside from needing their own section to explain, do graphics slightly
differently than everything else.  Currently areas are not animated, though it
would be straightforward to do so, and would still basically use the ideas here
described.

Most of the graphics capabilities in Omnisquash are just displaying parts of
images loaded from file, but areas (and rooms) actually generate their own 
images, and the idea is simple - it is better to take the time to generate a
single image for a room than it is to draw each tile for the room every loop.
In a word - buffering.

When an area is loaded, it references an image file which is logically
partitioned based on tile size, similar to sprites, as described in the section
on Animating sprites.  Each room in the area contains a matrix of tile indices, 
which are used to create a new Image from the tilesheet.  Since a room takes the
whole screen, and is not animated (yet), Image is preferable over Sprite.

It is certainly true that its not necessary that Area hold onto the tilesheet
after generating the buffers, but yolo.


+----------------+
|  10. Creators  |
+----------------+

Creators are the method by which the engine components attach to the game
components, see the section on Engine vs. Game.  I will admit that it may be
less than ideal, and also that it seems to mimic some of C++'s virtual function
tables.

At a high level what happens is this: you write your game specific code in each
of the appropriate directories (eg entities, enemies, etc).  At compile time, a
script reads the header files for your code, pulls out the methods, and 
generates a C file with code to allocate various tables of function pointers,
where each of your methods are stored.  At runtime, when you want to create an 
instance of your game specific objects, you need their ID number.  This ID is
used to determine which file to load, and then used to find the pointers in the
function tables that get stored in the struct for your object.

You MUST follow the formatting for the naming of files and methods in order for
this to work.

In particular, because each struct only contains pointers to certain methods,
your header files can only contain declarations for those functions.  In the
source files you can have whatever static methods you want, but the headers must
only expose the particular functions for each object, and must be named
correctly.

It is not required that you implement all methods however, and the engine checks
if function pointers are NULL before calling them.

Here is an example.  I want to make an entity that the player can interact with
to unlock doors.  The ID number 12345 is not currently in use by any other
entity, so I create a data file 12345.entity.  Now, my entity does not need any
special logic for drawing or moving, but it does need some special logic for
when the player interacts with it.  So, in the entities directory, I create the
files entity_12345.c and entity_12345.h.  The header file contains the usual
header guards, and includes what it needs, while the source file includes any
necessary header files.  Inside the source file I have many static methods to
implement my special logic - maybe I need to access and manipulate the current
room, or some global flags.  The header file however, contains only one method
declaration:
    
    void entity_interact_12345(Entity *self);

This of course (at the time of my writing this) matches the interact function
pointer in the Entity struct.  No structs are defined in the header, and no
other methods are declared.  Note that the ID matches the data files, the source
files, and the method name - this is intentional.

If I wanted to write other custom methods for this entity, then my header could
have the lines

    void entity_action_12345(void *e, int delta);

or 

    void entity_draw_12345(Entity *self, double shiftX, double shiftY);
    
I cannot emphasize enough the importance of correct naming for the function
tables to be generated correctly.  Each directory should include an example
tables file so that you can see what the generated file should look like (though
you should never need to modify the generated file, only the creator files and
the script that generates the files if you add methods to an object).  

What kinds of methods you can write depend on what methods are in your object.
If your object is a subclass, you can also write methods for the superclass (see
the enemies for an example of this).

Probably it is true that I don't need to dynamically allocate the tables for
all of these functions.  Maybe I will change that later, or maybe not, since it
does currently work.


+----------------+
|  11. Entities  |
+----------------+

The primary class for objects on the screen is Entity.  Almost everything is an
Entity or subclasses it in someway.  If you look at the struct for them its 
clear why this is: they contain all the basic data needed to draw something on
the screen, and not overmuch besides.  If you want to draw something on the
screen, you probably want to use an Entity.  The title and loading screens both
use entities for their graphics.  This also applies to subclassing - if you're
creating some sort of object, it probably should subclass Entity.

When initialized, see the section on Initialization/Termination, entities are
given default methods for action and draw, but no method for interact.  The
default action method simply advances the animation, see the section on 
Animating Sprites, and the default draw just draws the current frame of 
animation.

Most of the struct members are straightforward, so I won't go into detail.

Entities have an option for external movement, which is, as far as I know, the
only time that allocation actually occurs during the logic loop of the game (I
would deeply like to change this).  Essentially, any time you wish to impart a
force upon an entity BESIDES the movement they are creating themselves, you use
this.  For example, if the player hits an enemy, the enemy gets knocked back;
the knockback is the external movement.  This can also be used for moving
platforms or holes or whatever.


+----------------------------------+
|  12. Initialization/Termination  |
+----------------------------------+

There are many methods throughout the code base named initSomething, 
termSomething, init_SomethingElse, free_SomethingElse - what's the difference?

In this at least, I am being consistent in naming.  

Methods named initSomething or termSomething (for 'initialize' and 'terminate') 
are to be called when the engine starts and stops, respectively.  They do the 
broad initialization and teardown - start/stopping SDL, allocating/freeing the 
function tables described in the Creators section, etc.  These shouldn't get 
called during the course of a game.

Methods named init_SomethingElse, or term_SomethingElse, or free_SomethingElse,
will get called in the course of a game, because these methods are for objects.
Early on I had problems with uninitialized memory, so to counter this, I made,
for most objects, the init_* methods.  In general, you shouldn't allocate memory
for an object by itself, you should allocate it in the call to init_*, which
returns the pointer that you passed it.

For example, if I want to create a new Entity, I'll write:

Entity *ptr = init_Entity(malloc(sizeof(Entity)));

because this way I know that every member of Entity is being set to a default
value.

This is also important because it sets the default methods for objects.

The term_* and free_* methods are for freeing memory, and differ in only one
respect - term_* frees all held memory but NOT the actual object, while free_*
frees all held memory AND the actual object.  The distinction exists because
there are plenty of instances in which there are non-pointer instances of 
objects (global variables for example); while you want to free the memory
allocated for the pointer members of the object, trying to free the actual 
object would be bad news bears.

Some of this is stated in the design principles document.


+---------------------+
|  13. Miscellaneous  |
+---------------------+

There are a lot of other features and documentation that I could do.  Each
object and source file likely deserves their own section.  However, here are a
few of the features I have thought of whilst writing the rest of this.

Areas maintain a list of so called "temporary entities".  These are entities
that could not be known to be part of the room at load time, and which have a
temporary lifespan.  Bullets are a good example; they exist when the player
fires them, and then they should "stop existing" when they hit a wall or enemy.
The animation that an enemy plays when they die is a good example too, it only
needs to exist until the animation loop ends, and then it should be forgotten.






