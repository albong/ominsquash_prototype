Design Principles
-----------------

 -  Insofar as it is possible without herculean effort, the engine should be 
    pure C.  This doesn't mean that other languages can't be used for building
    or what have you, but the resulting code should be C.  This is to maximize
    portability, and to enable ease of coding for others.
    
 -  When possible, memory allocation/freeing should only be done in between
    areas, ie at loading screens.
 
 -  Minimize use of external libraries as much as possible.  Give preference to
    pure C libraries.
    
 -  Use size_t over int for indices.

 -  Don't compute anything during the drawing phase of the game loop.  Do all
    computation during the logic phase.

 -  Objects should have (up to) three methods: init_Object, term_Object, and
    free_Object.  The first initializes all struct members, pointers are set to
    NULL, or may (though they may not) be set to defaults for function
    pointers.  If an object subclasses something, it should call 
    init_SuperObject in init_Object.  The remaining two are for freeing objects,
    with the distinction that term_Object (for terminate) will free all members,
    but not free the object itself, whilst free_Object will free all members,
    and free the object itself.  For more fine tuned teardown, write methods as
    usual.

 -  Try to set pointers to NULL after freeing them.
